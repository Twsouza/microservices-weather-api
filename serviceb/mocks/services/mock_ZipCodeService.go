// Code generated by mockery v2.46.3. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockZipCodeService is an autogenerated mock type for the ZipCodeService type
type MockZipCodeService struct {
	mock.Mock
}

type MockZipCodeService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockZipCodeService) EXPECT() *MockZipCodeService_Expecter {
	return &MockZipCodeService_Expecter{mock: &_m.Mock}
}

// GetLocationByZipCode provides a mock function with given fields: ctx, zipCode
func (_m *MockZipCodeService) GetLocationByZipCode(ctx context.Context, zipCode string) (string, error) {
	ret := _m.Called(ctx, zipCode)

	if len(ret) == 0 {
		panic("no return value specified for GetLocationByZipCode")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, zipCode)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, zipCode)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, zipCode)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockZipCodeService_GetLocationByZipCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLocationByZipCode'
type MockZipCodeService_GetLocationByZipCode_Call struct {
	*mock.Call
}

// GetLocationByZipCode is a helper method to define mock.On call
//   - ctx context.Context
//   - zipCode string
func (_e *MockZipCodeService_Expecter) GetLocationByZipCode(ctx interface{}, zipCode interface{}) *MockZipCodeService_GetLocationByZipCode_Call {
	return &MockZipCodeService_GetLocationByZipCode_Call{Call: _e.mock.On("GetLocationByZipCode", ctx, zipCode)}
}

func (_c *MockZipCodeService_GetLocationByZipCode_Call) Run(run func(ctx context.Context, zipCode string)) *MockZipCodeService_GetLocationByZipCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockZipCodeService_GetLocationByZipCode_Call) Return(_a0 string, _a1 error) *MockZipCodeService_GetLocationByZipCode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockZipCodeService_GetLocationByZipCode_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockZipCodeService_GetLocationByZipCode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockZipCodeService creates a new instance of MockZipCodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockZipCodeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockZipCodeService {
	mock := &MockZipCodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
