// Code generated by mockery v2.46.3. DO NOT EDIT.

package services

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockZipCodeService is an autogenerated mock type for the ZipCodeService type
type MockZipCodeService struct {
	mock.Mock
}

type MockZipCodeService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockZipCodeService) EXPECT() *MockZipCodeService_Expecter {
	return &MockZipCodeService_Expecter{mock: &_m.Mock}
}

// IsValidCEP provides a mock function with given fields: ctx, cep
func (_m *MockZipCodeService) IsValidCEP(ctx context.Context, cep string) bool {
	ret := _m.Called(ctx, cep)

	if len(ret) == 0 {
		panic("no return value specified for IsValidCEP")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, cep)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockZipCodeService_IsValidCEP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsValidCEP'
type MockZipCodeService_IsValidCEP_Call struct {
	*mock.Call
}

// IsValidCEP is a helper method to define mock.On call
//   - ctx context.Context
//   - cep string
func (_e *MockZipCodeService_Expecter) IsValidCEP(ctx interface{}, cep interface{}) *MockZipCodeService_IsValidCEP_Call {
	return &MockZipCodeService_IsValidCEP_Call{Call: _e.mock.On("IsValidCEP", ctx, cep)}
}

func (_c *MockZipCodeService_IsValidCEP_Call) Run(run func(ctx context.Context, cep string)) *MockZipCodeService_IsValidCEP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockZipCodeService_IsValidCEP_Call) Return(_a0 bool) *MockZipCodeService_IsValidCEP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockZipCodeService_IsValidCEP_Call) RunAndReturn(run func(context.Context, string) bool) *MockZipCodeService_IsValidCEP_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockZipCodeService creates a new instance of MockZipCodeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockZipCodeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockZipCodeService {
	mock := &MockZipCodeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
